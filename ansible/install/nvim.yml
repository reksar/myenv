- hosts: local

  vars:
    myconf: "{{ playbook_dir | dirname | dirname }}"

  tasks:

  - name: Settings
    block:

    - name: Settings common
      include_vars:
        file: "{{ myconf }}/ansible/settings.yml"
        name: settings

    - name: Settings nvim
      set_fact:
        nvim:
          repo: "https://github.com/neovim/neovim.git"
          src: "{{ settings.user.src }}/neovim"
          dest: "{{ settings.user.run }}/nvim"

  - name: Check nvim already exists
    block:

    - name: Check nvim is ready
      shell:
        cmd: which nvim
      register: which
      failed_when: false
      changed_when: false

    - name: Set nvim is ready or not
      set_fact:
        nvim_ready: "{{ which.rc == 0 and which.stdout != '' }}"

  - name: Get ready
    when: not nvim_ready
    block:

    - name: Check nvim build
      stat:
        path: "{{ nvim.src }}/build/bin/nvim"
      register: build

    - name: Build
      when: not build.stat.exists
      block:

      # https://github.com/neovim/neovim/wiki/Building-Neovim#build-prerequisites
      - name: Install packages to build neovim
        include_tasks: packages.yml
        vars:
          packages:
            - git
            - ninja-build
            - gettext
            - libtool
            - libtool-bin
            - autoconf
            - automake
            - cmake
            - g++
            - pkg-config
            - unzip
            - curl
            - doxygen

      - name: Get neovim sources
        git:
          repo: "{{ nvim.repo }}"
          dest: "{{ nvim.src }}"
          version: stable
          # Clone if not exists, but do not update automatically
          update: no

      - name: Build neovim
        make:
          chdir: "{{ nvim.src }}"
          params:
            CMAKE_BUILD_TYPE: "Release"
            CMAKE_INSTALL_PREFIX: "{{ nvim.dest }}"
            USE_BUNDLED: "ON"

    - name: Check nvim installation
      stat:
        path: "{{ nvim.dest }}/bin/nvim"
      register: dest

    - name: Install nvim
      when: not dest.stat.exists
      make:
        chdir: "{{ nvim.src }}"
        target: install
      become: true

    - name: update-alternatives
      block:

      - name: Calc alternative priority for nvim
        vars:
          alt_functions: "{{ myconf }}/linux/scripts/alternatives.sh"
        shell:
          cmd: ". {{ alt_functions }} && alt_increment_priority nvim"
          executable: /bin/bash
        register: nvim_alt_priority
        failed_when: nvim_alt_priority.rc
        changed_when: false

      - name: Update nvim alternatives
        alternatives:
          name: nvim
          path: "{{ nvim.dest }}/bin/nvim"
          link: /usr/bin/nvim
          priority: "{{ nvim_alt_priority.stdout | int }}"
        become: true
